#--- Mesa Platform, Copyright 2021 Vueocity, LLC
"""
    Storage specializations

    Most files uploaded by MPF (whether by staff, user, or MPF)
    occur through Django storages and pass through here.

    Full paths are NEVER stored in the DB -- paths are
    derived from model information based on tenancy.

    MPF breaks down storage into 2 broad categories:

        Public and Protected

    Public folders have top-level folders:

        _static      - Code and resources, ready at run time
        _users       - User-specific resources (e.g., profile image)
        _reports     - Report files generated by system
        ...providers - Folder for each provider with public metadata
                       files for content and catalog

    Protected files are served through content access requests.
    Provider folders are organized by provider system_name with subfolders
    for different content types.
"""
from django.conf import settings
from django.core.files.storage import get_storage_class
from django.contrib.staticfiles.storage import StaticFilesStorage
from django.utils.functional import LazyObject
from compressor.storage import CompressorFileStorage

from . import log
from .utils import join_urls
from .aws.s3storage import mpS3BotoStorage


"""--------------------------------------------------------------------
    S3 Storages

    Uploading and accessing files on S3 in both public and protected
    buckets
"""

class mpS3Storage( mpS3BotoStorage ):
    """
    Storage wrapper for S3 bucket storage
    Supports passing config info to boto, and django-compressor
    """
    def __init__( self, *args, **kwargs ):
        """
        Default location is based on playpen
        """
        kwargs['location'] = settings.MP_PLAYPEN_STORAGE
        super().__init__( *args, **kwargs )

class mpS3StorageProtected( mpS3Storage ):
    """
    Protected storage upload and access
    """
    def __init__( self, *args, **kwargs ):

        # Settings aren't available at class load, so set here
        self.cache_age_browser = settings.MP_CACHE_AGE['BROWSER_PROTECTED']
        self.cache_age_cf = settings.MP_CACHE_AGE['EDGE_PROTECTED']

        kwargs['bucket_name'] = settings.MP_AWS_BUCKET_PROTECTED

        super().__init__( *args, **kwargs )

    def url( self, name ):
        return join_urls( '', name )

class _BaseStoragePublic( mpS3Storage ):
    """
    Base class for public files, used by Django pubic storage classes below
    """
    def __init__( self, *args, **kwargs ):

        # Settings aren't available at class load, so set here
        self.cache_age_browser = settings.MP_CACHE_AGE['BROWSER']
        self.cache_age_cf = settings.MP_CACHE_AGE['EDGE']

        kwargs['bucket_name'] = settings.MP_AWS_BUCKET_PUBLIC

        super().__init__( *args, **kwargs )

class mpS3StorageMedia( _BaseStoragePublic ):
    """
    Support for public uploads, called 'Media' by Django
    """
    def url( self, name ):
        return join_urls( settings.MEDIA_URL, name )

class mpS3StorageStatic( _BaseStoragePublic ):
    """
    Supports using django-compressor with the S3 static files, by storing
    any changes both on S3 and locally.
    """
    def __init__( self, *args, **kwargs ):
        super().__init__( *args, **kwargs )
        self.location = join_urls( self.location, settings.MP_PUBLIC_STATIC_FOLDER,
                    append_slash=True )
        self.local_storage = get_storage_class(
                    'compressor.storage.CompressorFileStorage' )()

    def save( self, name, content ):
        self.local_storage._save( name, content )
        name = super().save( name, content )
        return name

    def url( self, name ):
        return join_urls( settings.STATIC_URL, name )


"""--------------------------------------------------------------------
    Local dev storages

    When running local dev servers:

     - All test fixture and file upload/access are handled through
     the static files handler (i.e., path to Media URL is not used)

     - STATIC_URL will look in the test fixtures 'static' folder, so
      fix up path to match fixtures
"""

class mpLocalStaticStorage( StaticFilesStorage ):
    """
    Extra debugging for storage base
    """
    def path( self, name ):
        rv = super().path( name )
        log.debug2("Local static: %s", rv)
        return rv

class mpLocalStorageStatic( mpLocalStaticStorage, CompressorFileStorage ):
    """
    Storage wrapper for local public static storage with django-compressor
    """
    def url( self, name ):
        return join_urls( settings.STATIC_URL, name )

class mpLocalStorageProtected( mpLocalStaticStorage ):
    """
    Local protected (development) access is bastardized from static to take advantage of
    the Django server's serving of static files
    """
    def __init__( self, *args, **kwargs ):
        super().__init__( *args, **kwargs )
        self.location += '/protected_uploads/'

    def url( self, name ):
        return join_urls( '', name )

class mpLocalStoragePublic( mpLocalStaticStorage ):
    """
    Storage wrapper for local public bucket storage from user uploads
    """
    def __init__( self, *args, **kwargs ):
        super().__init__( *args, **kwargs )
        self.location += '/' + settings.DEV_MEDIA_UNDER_STATIC + '/'

    def url( self, name ):
        return join_urls( settings.STATIC_URL, settings.DEV_MEDIA_UNDER_STATIC, name )

#--------------------------------------------------------------------

class _PublicStorage( LazyObject ):
    def _setup(self):
        if settings.MP_CLOUD:
            storage_class = mpS3StorageMedia
        else:
            storage_class = mpLocalStoragePublic
        self._wrapped = storage_class()

public_storage = _PublicStorage()

class _ProtectedStorage( LazyObject ):
    def _setup(self):
        if settings.MP_CLOUD:
            storage_class = mpS3StorageProtected
        else:
            storage_class = mpLocalStorageProtected
        self._wrapped = storage_class()

protected_storage = _ProtectedStorage()
