#--- Mesa Platform, Copyright 2021 Vueocity, LLC
"""
    System Test case classes used to exercise:

        Internal (site server generated by test framework)
        External (existing site, including live site)

    This allows the same TestCase code to be unchanged for either scenario.

    Although possible to test different sandboxes within test case,
    test code generally assumes each running test will be against
    one sandbox. Run multiple test cases to test multiple sandboxes.
"""
from unittest import TestCase
from django.conf import settings
from django.test import LiveServerTestCase
from django.test.utils import override_settings

from mpframework.common import log
from mpframework.common.utils import get_random_key

from ..selenium.mixin import SeleniumTestCaseMixin


@override_settings( DEBUG=settings.DEBUG )
class SystemInternalTestCase( SeleniumTestCaseMixin, LiveServerTestCase ):
    """
    Selenium tests run using the internal test server.

    Uses LiveServerTestCase to run a server. This uses threads, so DB must be on disk
    instead of in memory since in-memory is not thread safe.
    """

    @classmethod
    def setUpClass( cls ):
        super().setUpClass()
        log.info("STARTED WebServerThread: %s:%s ",
                 cls.server_thread.host, cls.server_thread.port)

        cls.internal_server = hasattr( cls, 'server_thread' )
        cls.server_url = cls.live_server_url
        cls.site_url = cls.server_url

        # Setting ignore_errors flag on server thread to avoid 10054 error
        cls.server_thread.httpd.ignore_errors = True


class SystemExternalTestCase( SeleniumTestCaseMixin, TestCase ):
    """
    Selenium tests run against test servers external to the test process

    This includes live production site testing as well as dev testing against
    separate local servers or hosted dev servers.

    Unlike all other MPF tests which derive from Django TestCases to
    include DB and client support to simulate DB/browser, this is a Python unittest.
    Code shared with SystemInternalTestCase needs to be careful to only use unittest and
    MPF test functionality (vs. Django LiveServerTestCase functionality).
    """

    @classmethod
    def setUpClass( cls ):
        """
        Setup site/owner information
        Supports both testing existing sites and creating new sites to test,
        either using a name passed in, or (for new ones) a random name.
        """
        if not settings.MP_TEST_URL:
            raise Exception("\n\nsetURL to test is not set!\n"
                            "Set MP_TEST_URL or use the url option")

        super().setUpClass()

        # Testing against an existing or new sandbox?
        new = False
        name = settings.MP_TEST_SITE_NAME
        if name == '_new_test_site':
            new = True
            name = get_random_key( 4, 'mpa-' ).lower()

        # Load URL to test against for both root site and sandbox, taking into
        # account different url scenarios for local and remote testing
        cls.server_url = settings.MP_TEST_URL
        sandbox = name + '.' if name else ''
        if cls.server_url.startswith('http'):
            segs = cls.server_url.split('//')
            cls.site_url = '{}{}{}'.format( segs[0], sandbox, segs[1] )
        else:
            cls.site_url = 'https://{}{}'.format( sandbox, cls.server_url )
            cls.server_url = 'https://{}'.format( cls.server_url )

        # Include all data to run tests against a live site using onboarding
        cls.owner_data = {
            'new': new,
            'site_name': name,
            'site_subdomain': name,
            'email': 'owner_{}@{}'.format( name, settings.MP_ROOT['HOST'] ),
            'password': 'mptest1',
            }
